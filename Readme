1,一个Linux内核模块主要由如下几个部分组成。
	1.1 模块加载函数（一般需要）
 		当通过insmod或modprobe 命令加载内核模块时，模块的加载函数会自动被内核执行，完成模块的相关初始化。
	1.2 模块卸载函数（一般需要）
 		当通过rmmod命令卸载模块时，模块的卸载函数会自动内内核执行，完成与模块卸载函数相反的功能。
 	1.3 模块许可证声明(必须)
		许可证（LICENSE）声明描述内核模块的许可权限，如果不声明LICENSE,模块被加载时，将收到内核被污染（kernel tainted）的警告。
		MODULE_LINCENSE("Dual BSD/GPL")的语句声明模块采用BSD/GPL双LINCENSE。
	1.4 模块参数（可选）
		模块参数是模块被加载的时候可以被传递给它的值，它本身对应模块内部的全局变量。
	1.5 模块导出符号（可选）
		内核模块可以导出符号（symbol,对应于函数或变量），这样其他模块可以使用本模块中的变量或函数。
	1.6 模块作者等信息声明（可选）

2. Linux2.6 的 “proc/kallsyms”文件对应着内核符号表，它记录了符号以及符号所在的内存地址。
	模块可以使用如下宏到处符号到内核符号表：
	EXPORT_SYMBOL(符号名)；
	EXPORT_SYMBOL_GPL(符号名)；
	导出的符号将可以被其他模块使用，使用前声明一下即可，EXPORT_SYMBOL_GPL()只适用于包含GPL许可权的模块。

3. Linux 的文件系统
	1.创建
		int creat(const char *filename, mode_t mode);
		mode:指定新建文件的存取权限，它同umask一起决定文件的最终权限（mode&umask）
		umask可通过调用 int umask(int newmask)来改变，返回旧的umask。
	2. 打开
		int open(const char *pathname, int flags);
		int open(const char *pathname, int flags, mode_t mode);

		pathname:需要打开的文件名称，函数路径。
		flags:
			O_RDONLY			以只读的方式打开文件
			O_WRONLY			以只写的方式打开文件
			O_RDWR				以读写的方式打开文件
			O_APPEND			以追加的方式打开文件
			O_CREAT				创建一个文件
			O_EXEC				如果使用了O_CREAT而且文件存在，就会发生一个错误
			O_NOBLOCK			以非阻塞的方式打开一个文件
			O_TRUNC				如果文件存在，则删除文件的内容

		O_RDONLY，O_WRONLY，O_RDWR三个标志只能使用任意一个。
		使用O_CREAT，需要设置mode，用来表示访问权限。
				S_IRUSR 		用户可以读
				S_IWUSR			用户可以写
				S_IXUSR			用户可以执行
				S_IRWXU			用户可以读，写，执行
				S_IRGRP			组可以读
				S_IWGRP
				S_IXGRP
				S_IRWXG
				S_IROTH			其他人可以读
				S_IWOTH
				S_IXOTH
				S_IRWXO
				S_ISUDI			设置用户执行ID
				S_ISGID			设置组的指定ID

	3. 读写
		int read(int fd, const void *buf, size_t length);
		int write(int fd, const void *buf, size_t length);

	4. 定位
		int lseek(int fd, offset_t offset, int whence);
			lseek()将文件读写指针相对whence移动offset个字节，
			SEEK_SET: 相对文件开头
			SEEK_CUR:相对文件读写指针的当前位置
			SEEK_END:相对文件末尾

	5.关闭
		int close(int fd);

	二：C库的使用。
		2.1创建和打开
			FILE *fopen(const char *path, const char *mode);
				mode:
					r,rb		以只读方式
					w,wb		以只写方式打开，如果文件不存在则创建该文件，否则文件被截断
					a,ab		以追加方式打开，如果文件不存在，则创建该文件
					r+,r+b,rb+	以读写方式打开
					w+,w+b,wh+	以读写方式打开，如果文件不存在，创建新文件，否则文件被截断
					a+,a+b,ab+	以读和追加方式打开。如果文件不在，则创建新文件。

		2.2 读写
			int fgetc(FILE *stream);
			int fputc(int c, FILE *stream);
			char *fgets(char *s, int n, FILE *stream);
			int fputs(const char *s, FILE *stream);
			int fprintf(FILE);
			int fscanf(FILE stream, const char format, ...);
			size_t fread(void *ptr, size_t size, size_t n, FILE *stream);
			size_t fwrite(const void *ptr, size_t size, size_t n, FILE *stream);

			定位函数：
				int fgetpos(FILE *stream, fpos_t *pos);
				int fsetpos(FILE *stream, const fpos_t *pos);
				int fseek(FILE *stream, long offset, int whence);

		2.3	关闭
			fclose(FILE *stream);
	
	三：Linux文件系统和驱动设备
		3.1 查看/proc/devices文件可以获取系统中注册的设备。第一列为主设备号，第2列为次设备号
		3.2 查看/dev目录可以获知系统包含的设备文件，日期的前两列给出了对应设备的主从设备号
		3.3 在linux内核中，分别使用bus_type, device_driver和drvice来描述总线，驱动和设备。三个的结构体定义在include/linux/device.h

4.字符设备
	4.1 cdev结构体
		获取主从设备号:MAJOR(dev_t dev)  MINOR(dev_t dev)
		生成主从设备号：MKDEV(int major, int minor)

	4.2 虚拟文件接口：
		void cdev_init(struct cdev *, struct file_operations *);
		struct cdev *cdev_alloc(void);
		void cdev_put(struct cdev *p);
		int cdev_add(struct cdev *, dev_t , unsigned);
		void cdev_del(struct cdev *);

		cdev_init()函数用于初始化cdev成员，并建立cdev和file_operations之间的连接。
		cdev_alloc()用于动态申请一个cdev内存。
		cdev_add和cdev_del分别向系统贴加和删除一个cdev.完成字符设备的注册和注销。

	4.3 分配和释放设备号
		在调用cdev_add,函数向系统注册字符设备之前，应首先调用register_chrdev_region()或alloc_chrdev_region()函数向系统申请设备号。

	4.4 file_operations结构体：
		主要成员分析：
			1.llseek()函数用来修改一个文件的当前读写位置，并将新位置返回，在出错时，这个函数返回一个负值。
			2.read函数用来从设备读取数据。
			3.write函数向设备发送数据。
			4.readdir函数仅用于目录，设备节点不需要实现。
			5.ioctl提供设备相关的控制命令。
			6.mmap将设备内存映射到进程内存中，如果驱动设备为实现，用户进行mmap将返回错误。帧缓冲设备特别有意义。
			7.poll一般用于询问是否可被非阻塞地立即读写。当询问的条件未触发时，用户空间进行select()和poll()系统调用将引起进程的阻塞。
			8.aio_read和aio_write函数分别对与文件描述符对应的设备进行异步读，写操作，设备实现这两个函数后，用户空间可以对该设备文件描述符调用aio_read, aio_write等系统调用进行读写。

	4.5 内核空间和用户空间的拷贝
			unsigned long copy_from_user(void *to, const void __user *from, unsigned long count);
			unsigned long copy_to_user(void __user *to, const void *from, unsigned long count);

	4.6 复制内存的简单字符
			get_user(val, (int *)arg);
			put_user(val, (int *)arg);
5.并发控制
	5.1 
		1.对称多处理器（SMP）的多个CPU
		2.单CPU内进程与抢占它的进程
		3.中断（硬中断，软中断，Tasklet，底半部）与进程之间。

	5.2 中断屏蔽
		中断屏蔽的使用方法
			local_irq_disable();
				.....(临界区)
			local_irq_enable();
		注意：中断屏蔽只能禁止和使能本CPU内的中断，并不能解决SMP多CPU的中断位信息，不是值得推荐的竞态的方法，适合与自旋锁联合使用。

	5.3 原子操作
		1.设置原子变量的值
			void atomic_set(atomic_t *v, int i); /*设置原子变量的值为i*/
			atomic_t v = ATOMIC_INIT(0); /*定义原子变量并初始化为0*/


		2.获取原子变量的值
			atomic_read(atomic_t *v); /*返回原子变量的值*/
		3.原子变量加/减
			void atomic_add(int i, atomic_t *v);
			void atomic_sub(int i, atomic_t *v);
		4.原子变量自增/自减
			void atomic_inc(atomic_t *v);
			void atomic_dec(atomic_t *v);

		位原子操作：
			5.设置位
				void set_bit(nr, void *addr);
			6.清除位
				void clear_bit(nr, void *addr);
			7.改变位
				void change_bit(nr, void *addr);
			8.测试位
				test_bit(nr, void *addr);
	5.4 自旋锁
		1.定义自旋锁
			spinlock_t lock;
		2.初始化自旋锁
			spin_lock_init(lock);
		3.获得自旋锁
			spin_lock(lock); //如果能获取锁，立即返回，不能就一直自旋在那
			spin_trylock(lock); //如果能获取锁，立即返回真，不能返回假
		4.释放自旋锁
			spin_unlock(lock);

		自旋锁还可能受到CPU和本CPU内的抢占进程打扰，但是得到锁的代码路径在执行临界区的时候，还可能受到中断和底半部（BH）的影响，与中断，底半部形成了一套自旋锁机制。

		spin_lock_irq() = spin_lock + local_irq_disable
		spin_unlock_irq = spin_unlock + local_irq_enanbel
		spi_lock_irqsave = spin_lock + local_irq_save
		spi_unlock_irqrestore = spin_unlock + local_irq_restore
		spi_lock_bh = spin_lock + local_bh_disable
		spi_unlock_bh = spin_unlock + local_bh_enable


		注意：1.自旋锁一直是忙等待， 只有占用锁的时间极短的时候可以，使用自旋锁会降低性能。
			  2.自旋锁可能导致系统崩溃，引起死锁
			  3.自旋锁锁定期间不能调用可能引起进程调度的函数，可能导致内核崩溃，kmalloc, msleep, copy_to_user, copy_to_user
		

		读写自旋锁：
			1.定义和初始化读写自旋锁
			rwlock_t my_rwlock = RW_LOCK_UNLOCKED;
			rwlock_t my_rwlock;
			rwlock_init(&my_lwlock);

			2.读锁定
			void read_lock(rwlock_t *lock);
			void read_lock_irqsave(rwlock_t *lock, unsigned long flags);
			void read_lock_irq(rwlock_t *lock);
			void read_lock_bh(rwlock_t *lock);

			3.读解锁
			void read_unlock(rwlock_t *lock);
			void read_unlock_irqrestore(rwlock_t *lock, unsigned long flags);
			void read_unlock_irq(rwlock_t *lock);
			void read_unlock_bh(rwlock_t *lock);

			4.写锁定
			void write_lock(rwlock_t *lock);
			void write_lock_irqsave(rwlock_t *lock, unsigned long flags);
			void write_lock irq(rwlock t *lock);
			void write_lock
			int write_trylock(rwlock_t lock);

			5.写解锁
			void write_unlock(rwlock_t *lock);
			void write_unlock_irqrestore(rwlock_t *lock, unsigned long flags);
			void write_unlock_irq(rwlock_t *lock);
			void write_unlock_bh(rwlock_t *lock);

	5.5 顺序锁
		顺序锁--：顺序锁（seqlock）是对读写锁的一种优化，若使用顺序锁，读执行单元绝不会被写执行单元
		阻塞，也就是说，读执行单元在写执行单元对被顺序锁保护的共享资源进行写操作时仍然可以继
		续读，而不必等待写执行单元完成写操作，写执行单元也不需要等待所有读执行单元完成读操作
		才去进行写操作。
		但是，写执行单元与写执行单元之间仍然是互斥的，即如果有写执行单元在进行写操作，其
		他写执行单元必须自旋在那里，直到写执行单元释放了顺序锁。如果读执行单元在读操作期间，
		写执行单元已经发生了写操作，那么，读执行单元必须重新读取数据，以便确保得到的数据是完
		整的。这种锁对于读写同时进行的概率比较小的情况，性能是非常好的，而且它允许读写同时进
		行，因而更大地提高了并发性。
		顺序锁有一个限制，它必须要求被保护的共享资源不含有指针，因为写执行单元可能使得指
		针失效，但读执行单元如果正要访问该指针，将导致oops。

		1．获得顺序锁
			void write_seqlock(seqlock_t *sl);
			int write_tryseqlock(seqlock_t *sl);
			write_seqlock_irqsave(lock, flags)
			write_seqlock_irq(lock)
			write_seqlock_bh(lock)
		2．释放顺序锁
			void write_sequnlock(seqlock_t *sl);
			write_sequnlock_irqrestore(lock, flags)
			write_sequnlock_irq(lock)
			write_sequnlock_bh(lock)


			1．读开始
			unsigned read_seqbegin(const seqlock_t *sl);
			read_seqbegin_irqsave(lock, flags)
		
			2．重读
				int read_seqretry(const seqlock_t *sl, unsigned iv);
				read_seqretry_irqrestore(lock, iv, flags)

	5.5 􅺊读-拷贝更新（RCU）

	5.6 信号量
		信号量（semaphore）是用于保护临界区的一种常用方法，它的使用方式和自旋锁类似。与自
		旋锁相同，只有得到信号量的进程才能执行临界区代码。但是，与自旋锁不同的是，当获取不到
		信号量时，进程不会原地打转而是进入休眠等待状态。

		1. 定义信号量
			struct semaphore sem;
		2. 初始化信号量
			void sema_init(struct semaphore *sem, int val);
			#define init_MUTEX(sem) sema_init(sem, 1)
			#define init_MUTEX_LOCKED(sem) sema_init(sem, 0);
			DECLARE_MUTEX(name)
			DECLARE_MUTEX_LOCKED(name)
		3. 获得信号量
			void down(struct semaphore * sem); //该函数用于获得信号量sem，它会导致睡眠，因此不能在中断上下文使用；

			int down_interruptible(struct semaphore * sem); //该函数功能与down 类似，不同之处为，因为down()而进入睡眠状态的进程不能被信号打断，
			但因为down_interruptible()而进入睡眠状态的进程能被信号打断，信号也会导致该函数返回，这
			时候函数的返回值非0；

			int down_trylock(struct semaphore * sem); //该函数尝试获得信号量sem，如果能够立刻获得，它就获得该信号量并返回0，否则，返回
			非0 值。它不会导致调用者睡眠，可以在中断上下文使用

			在使用down_interruptible()获取信号量时，对返回值一般会进行检查，如果非0，通常立即返
			回- ERESTARTSYS
			if (down_interruptible(&sem))
				return - ERESTARTSYS;
		
		4．释放信号量
			void up(struct semaphore * sem);
	
	5.7 完成量
		完成量（ ompletion，关于这个名词，至今没有好的翻译，笔者将其译为“完成量”），它用于一个执行单元等待另一个执行单元执行完某事。
		1．定义完成量
			struct completion my_completion;
		2. 初始化completion
			init_completion(&my_completion);
			DECLARE_COMPLETION(my_completion);
		3.等待完成量
			void wait_for_completion(struct completion *c);
		4. 唤醒完成量
			void complete(struct completion *c);
			void complete_all(struct completion *c);
			前者只唤醒一个等待的执行单元，后者释放所有等待同一完成量的执行单元

	5.8 自旋锁VS信号量
		（1）当锁不能被获取到时，使用信号量的开销是进程上下文切换时间Tsw，使用自旋锁的开
		销是等待获取自旋锁（由临界区执行时间决定）Tcs，若Tcs 比较小，宜使用自旋锁，若Tcs 很大，
		应使用信号量

		（2）信号量所保护的临界区可包含可能引起阻塞的代码，而自旋锁则绝对要避免用来保护包
		含这样代码的临界区。因为阻塞意味着要进行进程的切换，如果进程被切换出去后，另一个进程
		企图获取本自旋锁，死锁就会发生。

		（3）信号量存在于进程上下文，因此，如果被保护的共享资源需要在中断或软中断情况下使
		用，则在信号量和自旋锁之间只能选择自旋锁。当然，如果一定要使用信号量，则只能通过
		down_trylock()方式进行，不能获取就立即返回以避免阻塞。


	5.9 读写信号量
		1．定义和初始化读写信号量
		struct rw_semaphore my_rws; /*定义读写信号量*/
		void init_rwsem(struct rw_semaphore *sem); /*初始化读写信号量*/
		2．读信号量获取
		void down_read(struct rw_semaphore *sem);
		int down_read_trylock(struct rw_semaphore *sem);
		3．读信号量释放
		void up_read(struct rw_semaphore *sem);
		4．写信号量获取
		void down_write(struct rw_semaphore *sem);
		int down_write_trylock(struct rw_semaphore *sem);
		5．写信号量释放
		void up_write(struct rw_semaphore *sem);

	5.10 互斥体
		struct mutex my_mutex;
		mutex_init(&my_mutex);

		void inline _ _sched mutex_lock(struct mutex *lock);
		int __sched mutex_lock_interruptible(struct mutex *lock);
		int __sched mutex_trylock(struct mutex *lock);

		mutex_lock()与mutex_lock_interruptible()的区别和down()与down_trylock()的区别完全一致，
		前者引起的睡眠不能被信号打断，而后者可以。mutex_trylock()用于尝试获得mutex，获取不到
		mutex 时不会引起进程睡眠



		void __sched mutex_unlock(struct mutex *lock);


6 阻塞与非阻塞
	阻塞操作是指在执行设备操作时，若不能获得资源，则挂起进程直到满足可操作的条件后再
	进行操作。被挂起的进程进入休眠状态，被从调度器的运行队列移走，直到等待的条件被满足。
	而非阻塞操作的进程在不能进行设备操作时，并不挂起，它或者放弃，或者不停地查询，直至可
	以进行操作为止。
	6.1 等待队列
		1.定义“等待队列头”
			wait_queue_head_t my_queue;
		2.初始化“等待队列头”
			init_waitqueue_head(&my_queue);
			DECLARE_WAIT_QUEUE_HEAD (name)
		3.定义等待队列
			DECLARE_WAITQUEUE(name, tsk)
		4. 添加/移除等待队列
			void fastcall add_wait_queue(wait_queue_head_t *q, wait_queue_t *wait);
			void fastcall remove_wait_queue(wait_queue_head_t *q, wait_queue_t *wait);
		5.等待事件
			wait_event(queue, condition)
			wait_event_interruptible(queue, condition)
			wait_event_timeout(queue, condition, timeout)
			wait_event_interruptible timeout(queue, condition, timeout)

				wait_event()和wait_event_interruptible()的区别在于后者可以被信号打断，而
				前者不能。加上_timeout 后的宏意味着阻塞等待的超时时间，以jiffy 为单位，在第3 个参数的timeout
				到达时，不论condition 是否满足，均返回。
		6.唤醒队列
			void wake_up(wait_queue_head_t *queue);
			void wake_up_interruptible(wait_queue_head_t *queue);

				wake_up()应该与wait_event()或wait_event_timeout()成对使用，而wake_up_interruptible()
				则应与wait_event_interruptible()或wait_event_interruptible_timeout()成对使用。wake_up()可唤醒
				处于TASK_INTERRUPTIBLE 和TASK_UNINTERRUPTIBLE 的进程，而wake_up_interruptible()
				只能唤醒处于TASK_INTERRUPTIBLE 的进程。
		7.在等待队列上睡眠
			sleep_on(wait_queue_head_t *q );
			interruptible_sleep_on(wait_queue_head_t *q );

			interruptible_sleep_on()与sleep_on()函数类似，其作用是将目前进程的状态置成TASK_
			INTERRUPTIBLE，并定义一个等待队列，之后把它附属到等待队列头q，直到资源可获得，q 引导
			的等待队列被唤醒或者进程收到信号



